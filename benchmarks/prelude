{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DerivingVia #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE DeriveGeneric #-}


import Roboservant
import Servant
import Data.Hashable
import GHC.Generics
import Data.Aeson
import Servant.API.Flatten

data Input = Input1 { foo :: String }
           | Input2 { bar :: Int  }
  deriving (Generic, Eq)

instance FromJSON Input
instance ToJSON Input


deriving via (Compound Input) instance Breakdown Input
deriving via (Compound Input) instance BuildFrom Input


-- deriving via (Atom Input) instance Breakdown Input
-- deriving via (Atom Input) instance BuildFrom Input

instance Hashable Input


data Output = Output1 { ofoo :: String }
            | Output2 { obar :: Int  }
  deriving (Generic, Eq)

instance FromJSON Output
instance ToJSON Output

instance Hashable Output

deriving via (Compound Output) instance Breakdown Output
deriving via (Compound Output) instance BuildFrom Output

-- deriving via (Atom Output) instance Breakdown Output
-- deriving via (Atom Output) instance BuildFrom Output


handler :: Input -> Handler Output
handler = pure . \case
  Input1 foo -> Output1 foo
  Input2 bar -> Output2 bar

main =
  --  fuzz @Api server defaultConfig 
  pure ()

f = flatten (Proxy @Api)

